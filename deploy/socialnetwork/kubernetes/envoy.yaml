apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: social-network-transcoder
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: "envoy.filters.http.grpc_json_transcoder"
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
          services:
          - "microless.socialnetwork.composepost.ComposePostService"
          - "microless.socialnetwork.hometimeline.HomeTimelineService"
          - "microless.socialnetwork.socialgraph.SocialGraphService"
          - "microless.socialnetwork.user.UserService"
          - "microless.socialnetwork.usertimeline.UserTimelineService"
          print_options:
            always_print_primitive_fields: true
            always_print_enums_as_ints: false
            preserve_proto_field_names: false
          protoDescriptorBin: 
