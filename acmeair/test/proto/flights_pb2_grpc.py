# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import flights_pb2 as proto_dot_flights__pb2


class FlightsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTripFlights = channel.unary_unary(
                '/microless.acmeair.flights.FlightsService/GetTripFlights',
                request_serializer=proto_dot_flights__pb2.GetTripFlightsRequest.SerializeToString,
                response_deserializer=proto_dot_flights__pb2.GetTripFlightsRespond.FromString,
                )
        self.BrowseFlights = channel.unary_unary(
                '/microless.acmeair.flights.FlightsService/BrowseFlights',
                request_serializer=proto_dot_flights__pb2.BrowseFlightsRequest.SerializeToString,
                response_deserializer=proto_dot_flights__pb2.BrowseFlightsRespond.FromString,
                )
        self.GetFlightById = channel.unary_unary(
                '/microless.acmeair.flights.FlightsService/GetFlightById',
                request_serializer=proto_dot_flights__pb2.GetFlightByIdRequest.SerializeToString,
                response_deserializer=proto_dot_flights__pb2.GetFlightByIdRespond.FromString,
                )


class FlightsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTripFlights(self, request, context):
        """REST api
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BrowseFlights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFlightById(self, request, context):
        """internal api
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlightsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTripFlights': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTripFlights,
                    request_deserializer=proto_dot_flights__pb2.GetTripFlightsRequest.FromString,
                    response_serializer=proto_dot_flights__pb2.GetTripFlightsRespond.SerializeToString,
            ),
            'BrowseFlights': grpc.unary_unary_rpc_method_handler(
                    servicer.BrowseFlights,
                    request_deserializer=proto_dot_flights__pb2.BrowseFlightsRequest.FromString,
                    response_serializer=proto_dot_flights__pb2.BrowseFlightsRespond.SerializeToString,
            ),
            'GetFlightById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFlightById,
                    request_deserializer=proto_dot_flights__pb2.GetFlightByIdRequest.FromString,
                    response_serializer=proto_dot_flights__pb2.GetFlightByIdRespond.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'microless.acmeair.flights.FlightsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlightsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTripFlights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/microless.acmeair.flights.FlightsService/GetTripFlights',
            proto_dot_flights__pb2.GetTripFlightsRequest.SerializeToString,
            proto_dot_flights__pb2.GetTripFlightsRespond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BrowseFlights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/microless.acmeair.flights.FlightsService/BrowseFlights',
            proto_dot_flights__pb2.BrowseFlightsRequest.SerializeToString,
            proto_dot_flights__pb2.BrowseFlightsRespond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFlightById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/microless.acmeair.flights.FlightsService/GetFlightById',
            proto_dot_flights__pb2.GetFlightByIdRequest.SerializeToString,
            proto_dot_flights__pb2.GetFlightByIdRespond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
