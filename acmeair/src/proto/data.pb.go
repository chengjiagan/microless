// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: proto/data.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PhoneType int32

const (
	PhoneType_UNKNOWN  PhoneType = 0
	PhoneType_HOME     PhoneType = 1
	PhoneType_BUSINESS PhoneType = 2
	PhoneType_MOBILE   PhoneType = 3
)

// Enum value maps for PhoneType.
var (
	PhoneType_name = map[int32]string{
		0: "UNKNOWN",
		1: "HOME",
		2: "BUSINESS",
		3: "MOBILE",
	}
	PhoneType_value = map[string]int32{
		"UNKNOWN":  0,
		"HOME":     1,
		"BUSINESS": 2,
		"MOBILE":   3,
	}
)

func (x PhoneType) Enum() *PhoneType {
	p := new(PhoneType)
	*p = x
	return p
}

func (x PhoneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_data_proto_enumTypes[0].Descriptor()
}

func (PhoneType) Type() protoreflect.EnumType {
	return &file_proto_data_proto_enumTypes[0]
}

func (x PhoneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneType.Descriptor instead.
func (PhoneType) EnumDescriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{0}
}

type MemberShipStatus int32

const (
	MemberShipStatus_NONE          MemberShipStatus = 0
	MemberShipStatus_SILVER        MemberShipStatus = 1
	MemberShipStatus_GOLD          MemberShipStatus = 2
	MemberShipStatus_PLATINUM      MemberShipStatus = 3
	MemberShipStatus_EXEC_PLATINUM MemberShipStatus = 4
	MemberShipStatus_GRAPHITE      MemberShipStatus = 5
)

// Enum value maps for MemberShipStatus.
var (
	MemberShipStatus_name = map[int32]string{
		0: "NONE",
		1: "SILVER",
		2: "GOLD",
		3: "PLATINUM",
		4: "EXEC_PLATINUM",
		5: "GRAPHITE",
	}
	MemberShipStatus_value = map[string]int32{
		"NONE":          0,
		"SILVER":        1,
		"GOLD":          2,
		"PLATINUM":      3,
		"EXEC_PLATINUM": 4,
		"GRAPHITE":      5,
	}
)

func (x MemberShipStatus) Enum() *MemberShipStatus {
	p := new(MemberShipStatus)
	*p = x
	return p
}

func (x MemberShipStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemberShipStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_data_proto_enumTypes[1].Descriptor()
}

func (MemberShipStatus) Type() protoreflect.EnumType {
	return &file_proto_data_proto_enumTypes[1]
}

func (x MemberShipStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemberShipStatus.Descriptor instead.
func (MemberShipStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{1}
}

type BookingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId     string                 `protobuf:"bytes,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	OneWayFlight  bool                   `protobuf:"varint,2,opt,name=one_way_flight,json=oneWayFlight,proto3" json:"one_way_flight,omitempty"`
	ToFlight      *FlightInfo            `protobuf:"bytes,3,opt,name=to_flight,json=toFlight,proto3" json:"to_flight,omitempty"`
	ReturnFlight  *FlightInfo            `protobuf:"bytes,4,opt,name=return_flight,json=returnFlight,proto3" json:"return_flight,omitempty"`
	Customer      *CustomerInfo          `protobuf:"bytes,5,opt,name=customer,proto3" json:"customer,omitempty"`
	DateOfBooking *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date_of_booking,json=dateOfBooking,proto3" json:"date_of_booking,omitempty"`
}

func (x *BookingInfo) Reset() {
	*x = BookingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingInfo) ProtoMessage() {}

func (x *BookingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingInfo.ProtoReflect.Descriptor instead.
func (*BookingInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{0}
}

func (x *BookingInfo) GetBookingId() string {
	if x != nil {
		return x.BookingId
	}
	return ""
}

func (x *BookingInfo) GetOneWayFlight() bool {
	if x != nil {
		return x.OneWayFlight
	}
	return false
}

func (x *BookingInfo) GetToFlight() *FlightInfo {
	if x != nil {
		return x.ToFlight
	}
	return nil
}

func (x *BookingInfo) GetReturnFlight() *FlightInfo {
	if x != nil {
		return x.ReturnFlight
	}
	return nil
}

func (x *BookingInfo) GetCustomer() *CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *BookingInfo) GetDateOfBooking() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBooking
	}
	return nil
}

type CustomerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId      string           `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Username        string           `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Status          MemberShipStatus `protobuf:"varint,3,opt,name=status,proto3,enum=microless.acmeair.MemberShipStatus" json:"status,omitempty"`
	TotalMiles      int32            `protobuf:"varint,4,opt,name=total_miles,json=totalMiles,proto3" json:"total_miles,omitempty"`
	MilesYtd        int32            `protobuf:"varint,5,opt,name=miles_ytd,json=milesYtd,proto3" json:"miles_ytd,omitempty"`
	Address         *AddressInfo     `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	PhoneNumber     string           `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneNumberType PhoneType        `protobuf:"varint,8,opt,name=phone_number_type,json=phoneNumberType,proto3,enum=microless.acmeair.PhoneType" json:"phone_number_type,omitempty"`
}

func (x *CustomerInfo) Reset() {
	*x = CustomerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerInfo) ProtoMessage() {}

func (x *CustomerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerInfo.ProtoReflect.Descriptor instead.
func (*CustomerInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{1}
}

func (x *CustomerInfo) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *CustomerInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CustomerInfo) GetStatus() MemberShipStatus {
	if x != nil {
		return x.Status
	}
	return MemberShipStatus_NONE
}

func (x *CustomerInfo) GetTotalMiles() int32 {
	if x != nil {
		return x.TotalMiles
	}
	return 0
}

func (x *CustomerInfo) GetMilesYtd() int32 {
	if x != nil {
		return x.MilesYtd
	}
	return 0
}

func (x *CustomerInfo) GetAddress() *AddressInfo {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CustomerInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CustomerInfo) GetPhoneNumberType() PhoneType {
	if x != nil {
		return x.PhoneNumberType
	}
	return PhoneType_UNKNOWN
}

type AddressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreetAddress1 string `protobuf:"bytes,1,opt,name=street_address1,json=streetAddress1,proto3" json:"street_address1,omitempty"`
	StreetAddress2 string `protobuf:"bytes,2,opt,name=street_address2,json=streetAddress2,proto3" json:"street_address2,omitempty"`
	City           string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	StateProvince  string `protobuf:"bytes,4,opt,name=state_province,json=stateProvince,proto3" json:"state_province,omitempty"`
	Country        string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	PostalCode     string `protobuf:"bytes,6,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
}

func (x *AddressInfo) Reset() {
	*x = AddressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressInfo) ProtoMessage() {}

func (x *AddressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressInfo.ProtoReflect.Descriptor instead.
func (*AddressInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{2}
}

func (x *AddressInfo) GetStreetAddress1() string {
	if x != nil {
		return x.StreetAddress1
	}
	return ""
}

func (x *AddressInfo) GetStreetAddress2() string {
	if x != nil {
		return x.StreetAddress2
	}
	return ""
}

func (x *AddressInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AddressInfo) GetStateProvince() string {
	if x != nil {
		return x.StateProvince
	}
	return ""
}

func (x *AddressInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AddressInfo) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

type FlightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightId               string                 `protobuf:"bytes,1,opt,name=flight_id,json=flightId,proto3" json:"flight_id,omitempty"`
	ScheduledDepartureTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=scheduled_departure_time,json=scheduledDepartureTime,proto3" json:"scheduled_departure_time,omitempty"`
	ScheduledArrivalTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=scheduled_arrival_time,json=scheduledArrivalTime,proto3" json:"scheduled_arrival_time,omitempty"`
	FirstClassBaseCost     int64                  `protobuf:"varint,5,opt,name=first_class_base_cost,json=firstClassBaseCost,proto3" json:"first_class_base_cost,omitempty"`
	EconomyClassBaseCost   int64                  `protobuf:"varint,6,opt,name=economy_class_base_cost,json=economyClassBaseCost,proto3" json:"economy_class_base_cost,omitempty"`
	NumFirstClassSeats     int32                  `protobuf:"varint,7,opt,name=num_first_class_seats,json=numFirstClassSeats,proto3" json:"num_first_class_seats,omitempty"`
	NumEconomyClassSeats   int32                  `protobuf:"varint,8,opt,name=num_economy_class_seats,json=numEconomyClassSeats,proto3" json:"num_economy_class_seats,omitempty"`
	AirplaneTypeId         string                 `protobuf:"bytes,9,opt,name=airplane_type_id,json=airplaneTypeId,proto3" json:"airplane_type_id,omitempty"`
	FlightSegment          *FlightSegmentInfo     `protobuf:"bytes,10,opt,name=flight_segment,json=flightSegment,proto3" json:"flight_segment,omitempty"`
}

func (x *FlightInfo) Reset() {
	*x = FlightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightInfo) ProtoMessage() {}

func (x *FlightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightInfo.ProtoReflect.Descriptor instead.
func (*FlightInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{3}
}

func (x *FlightInfo) GetFlightId() string {
	if x != nil {
		return x.FlightId
	}
	return ""
}

func (x *FlightInfo) GetScheduledDepartureTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledDepartureTime
	}
	return nil
}

func (x *FlightInfo) GetScheduledArrivalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledArrivalTime
	}
	return nil
}

func (x *FlightInfo) GetFirstClassBaseCost() int64 {
	if x != nil {
		return x.FirstClassBaseCost
	}
	return 0
}

func (x *FlightInfo) GetEconomyClassBaseCost() int64 {
	if x != nil {
		return x.EconomyClassBaseCost
	}
	return 0
}

func (x *FlightInfo) GetNumFirstClassSeats() int32 {
	if x != nil {
		return x.NumFirstClassSeats
	}
	return 0
}

func (x *FlightInfo) GetNumEconomyClassSeats() int32 {
	if x != nil {
		return x.NumEconomyClassSeats
	}
	return 0
}

func (x *FlightInfo) GetAirplaneTypeId() string {
	if x != nil {
		return x.AirplaneTypeId
	}
	return ""
}

func (x *FlightInfo) GetFlightSegment() *FlightSegmentInfo {
	if x != nil {
		return x.FlightSegment
	}
	return nil
}

type FlightSegmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightName    string `protobuf:"bytes,1,opt,name=flight_name,json=flightName,proto3" json:"flight_name,omitempty"`
	FlightSegment string `protobuf:"bytes,2,opt,name=flight_segment,json=flightSegment,proto3" json:"flight_segment,omitempty"`
	OriginPort    string `protobuf:"bytes,3,opt,name=origin_port,json=originPort,proto3" json:"origin_port,omitempty"`
	DestPort      string `protobuf:"bytes,4,opt,name=dest_port,json=destPort,proto3" json:"dest_port,omitempty"`
	Miles         int32  `protobuf:"varint,5,opt,name=miles,proto3" json:"miles,omitempty"`
}

func (x *FlightSegmentInfo) Reset() {
	*x = FlightSegmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightSegmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightSegmentInfo) ProtoMessage() {}

func (x *FlightSegmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightSegmentInfo.ProtoReflect.Descriptor instead.
func (*FlightSegmentInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_proto_rawDescGZIP(), []int{4}
}

func (x *FlightSegmentInfo) GetFlightName() string {
	if x != nil {
		return x.FlightName
	}
	return ""
}

func (x *FlightSegmentInfo) GetFlightSegment() string {
	if x != nil {
		return x.FlightSegment
	}
	return ""
}

func (x *FlightSegmentInfo) GetOriginPort() string {
	if x != nil {
		return x.OriginPort
	}
	return ""
}

func (x *FlightSegmentInfo) GetDestPort() string {
	if x != nil {
		return x.DestPort
	}
	return ""
}

func (x *FlightSegmentInfo) GetMiles() int32 {
	if x != nil {
		return x.Miles
	}
	return 0
}

var File_proto_data_proto protoreflect.FileDescriptor

var file_proto_data_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x63,
	0x6d, 0x65, 0x61, 0x69, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x02, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x79,
	0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x57, 0x61, 0x79, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x74,
	0x6f, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x61,
	0x69, 0x72, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74,
	0x6f, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x61,
	0x69, 0x72, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x61, 0x69,
	0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xed, 0x02, 0x0a,
	0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6c, 0x65,
	0x73, 0x5f, 0x79, 0x74, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6c,
	0x65, 0x73, 0x59, 0x74, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x61, 0x69,
	0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd5, 0x01, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x04, 0x0a, 0x0a, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64,
	0x12, 0x54, 0x0a, 0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x69, 0x72, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x69, 0x72, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x61,
	0x69, 0x72, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x69, 0x6c, 0x65, 0x73, 0x2a, 0x3c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55, 0x53,
	0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x10, 0x03, 0x2a, 0x61, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x69,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x54, 0x49,
	0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x50, 0x4c,
	0x41, 0x54, 0x49, 0x4e, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x41, 0x50,
	0x48, 0x49, 0x54, 0x45, 0x10, 0x05, 0x42, 0x19, 0x5a, 0x17, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x73, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_data_proto_rawDescOnce sync.Once
	file_proto_data_proto_rawDescData = file_proto_data_proto_rawDesc
)

func file_proto_data_proto_rawDescGZIP() []byte {
	file_proto_data_proto_rawDescOnce.Do(func() {
		file_proto_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_data_proto_rawDescData)
	})
	return file_proto_data_proto_rawDescData
}

var file_proto_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_data_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_data_proto_goTypes = []interface{}{
	(PhoneType)(0),                // 0: microless.acmeair.PhoneType
	(MemberShipStatus)(0),         // 1: microless.acmeair.MemberShipStatus
	(*BookingInfo)(nil),           // 2: microless.acmeair.BookingInfo
	(*CustomerInfo)(nil),          // 3: microless.acmeair.CustomerInfo
	(*AddressInfo)(nil),           // 4: microless.acmeair.AddressInfo
	(*FlightInfo)(nil),            // 5: microless.acmeair.FlightInfo
	(*FlightSegmentInfo)(nil),     // 6: microless.acmeair.FlightSegmentInfo
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_proto_data_proto_depIdxs = []int32{
	5,  // 0: microless.acmeair.BookingInfo.to_flight:type_name -> microless.acmeair.FlightInfo
	5,  // 1: microless.acmeair.BookingInfo.return_flight:type_name -> microless.acmeair.FlightInfo
	3,  // 2: microless.acmeair.BookingInfo.customer:type_name -> microless.acmeair.CustomerInfo
	7,  // 3: microless.acmeair.BookingInfo.date_of_booking:type_name -> google.protobuf.Timestamp
	1,  // 4: microless.acmeair.CustomerInfo.status:type_name -> microless.acmeair.MemberShipStatus
	4,  // 5: microless.acmeair.CustomerInfo.address:type_name -> microless.acmeair.AddressInfo
	0,  // 6: microless.acmeair.CustomerInfo.phone_number_type:type_name -> microless.acmeair.PhoneType
	7,  // 7: microless.acmeair.FlightInfo.scheduled_departure_time:type_name -> google.protobuf.Timestamp
	7,  // 8: microless.acmeair.FlightInfo.scheduled_arrival_time:type_name -> google.protobuf.Timestamp
	6,  // 9: microless.acmeair.FlightInfo.flight_segment:type_name -> microless.acmeair.FlightSegmentInfo
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_data_proto_init() }
func file_proto_data_proto_init() {
	if File_proto_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightSegmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_data_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_data_proto_goTypes,
		DependencyIndexes: file_proto_data_proto_depIdxs,
		EnumInfos:         file_proto_data_proto_enumTypes,
		MessageInfos:      file_proto_data_proto_msgTypes,
	}.Build()
	File_proto_data_proto = out.File
	file_proto_data_proto_rawDesc = nil
	file_proto_data_proto_goTypes = nil
	file_proto_data_proto_depIdxs = nil
}
