// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/flights.proto

package flights

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlightsServiceClient is the client API for FlightsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightsServiceClient interface {
	// REST api
	GetTripFlights(ctx context.Context, in *GetTripFlightsRequest, opts ...grpc.CallOption) (*GetTripFlightsRespond, error)
	BrowseFlights(ctx context.Context, in *BrowseFlightsRequest, opts ...grpc.CallOption) (*BrowseFlightsRespond, error)
	// internal api
	GetFlightById(ctx context.Context, in *GetFlightByIdRequest, opts ...grpc.CallOption) (*GetFlightByIdRespond, error)
}

type flightsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightsServiceClient(cc grpc.ClientConnInterface) FlightsServiceClient {
	return &flightsServiceClient{cc}
}

func (c *flightsServiceClient) GetTripFlights(ctx context.Context, in *GetTripFlightsRequest, opts ...grpc.CallOption) (*GetTripFlightsRespond, error) {
	out := new(GetTripFlightsRespond)
	err := c.cc.Invoke(ctx, "/microless.acmeair.flights.FlightsService/GetTripFlights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsServiceClient) BrowseFlights(ctx context.Context, in *BrowseFlightsRequest, opts ...grpc.CallOption) (*BrowseFlightsRespond, error) {
	out := new(BrowseFlightsRespond)
	err := c.cc.Invoke(ctx, "/microless.acmeair.flights.FlightsService/BrowseFlights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsServiceClient) GetFlightById(ctx context.Context, in *GetFlightByIdRequest, opts ...grpc.CallOption) (*GetFlightByIdRespond, error) {
	out := new(GetFlightByIdRespond)
	err := c.cc.Invoke(ctx, "/microless.acmeair.flights.FlightsService/GetFlightById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightsServiceServer is the server API for FlightsService service.
// All implementations must embed UnimplementedFlightsServiceServer
// for forward compatibility
type FlightsServiceServer interface {
	// REST api
	GetTripFlights(context.Context, *GetTripFlightsRequest) (*GetTripFlightsRespond, error)
	BrowseFlights(context.Context, *BrowseFlightsRequest) (*BrowseFlightsRespond, error)
	// internal api
	GetFlightById(context.Context, *GetFlightByIdRequest) (*GetFlightByIdRespond, error)
	mustEmbedUnimplementedFlightsServiceServer()
}

// UnimplementedFlightsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlightsServiceServer struct {
}

func (UnimplementedFlightsServiceServer) GetTripFlights(context.Context, *GetTripFlightsRequest) (*GetTripFlightsRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTripFlights not implemented")
}
func (UnimplementedFlightsServiceServer) BrowseFlights(context.Context, *BrowseFlightsRequest) (*BrowseFlightsRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowseFlights not implemented")
}
func (UnimplementedFlightsServiceServer) GetFlightById(context.Context, *GetFlightByIdRequest) (*GetFlightByIdRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightById not implemented")
}
func (UnimplementedFlightsServiceServer) mustEmbedUnimplementedFlightsServiceServer() {}

// UnsafeFlightsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightsServiceServer will
// result in compilation errors.
type UnsafeFlightsServiceServer interface {
	mustEmbedUnimplementedFlightsServiceServer()
}

func RegisterFlightsServiceServer(s grpc.ServiceRegistrar, srv FlightsServiceServer) {
	s.RegisterService(&FlightsService_ServiceDesc, srv)
}

func _FlightsService_GetTripFlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripFlightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServiceServer).GetTripFlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.acmeair.flights.FlightsService/GetTripFlights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServiceServer).GetTripFlights(ctx, req.(*GetTripFlightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightsService_BrowseFlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseFlightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServiceServer).BrowseFlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.acmeair.flights.FlightsService/BrowseFlights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServiceServer).BrowseFlights(ctx, req.(*BrowseFlightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightsService_GetFlightById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServiceServer).GetFlightById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.acmeair.flights.FlightsService/GetFlightById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServiceServer).GetFlightById(ctx, req.(*GetFlightByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlightsService_ServiceDesc is the grpc.ServiceDesc for FlightsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microless.acmeair.flights.FlightsService",
	HandlerType: (*FlightsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTripFlights",
			Handler:    _FlightsService_GetTripFlights_Handler,
		},
		{
			MethodName: "BrowseFlights",
			Handler:    _FlightsService_BrowseFlights_Handler,
		},
		{
			MethodName: "GetFlightById",
			Handler:    _FlightsService_GetFlightById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/flights.proto",
}
