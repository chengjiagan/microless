// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/bookings.proto

package bookings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingsServiceClient is the client API for BookingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingsServiceClient interface {
	// REST api
	BookFlights(ctx context.Context, in *BookFlightsRequest, opts ...grpc.CallOption) (*BookFlightsRespond, error)
	GetBookingById(ctx context.Context, in *GetBookingByIdRequest, opts ...grpc.CallOption) (*GetBookingByIdRespond, error)
	GetBookingByUser(ctx context.Context, in *GetBookingByUserRequest, opts ...grpc.CallOption) (*GetBookingByUserRespond, error)
	CancelBookingById(ctx context.Context, in *CancelBookingByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bookingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingsServiceClient(cc grpc.ClientConnInterface) BookingsServiceClient {
	return &bookingsServiceClient{cc}
}

func (c *bookingsServiceClient) BookFlights(ctx context.Context, in *BookFlightsRequest, opts ...grpc.CallOption) (*BookFlightsRespond, error) {
	out := new(BookFlightsRespond)
	err := c.cc.Invoke(ctx, "/microless.acmeair.bookings.BookingsService/BookFlights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsServiceClient) GetBookingById(ctx context.Context, in *GetBookingByIdRequest, opts ...grpc.CallOption) (*GetBookingByIdRespond, error) {
	out := new(GetBookingByIdRespond)
	err := c.cc.Invoke(ctx, "/microless.acmeair.bookings.BookingsService/GetBookingById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsServiceClient) GetBookingByUser(ctx context.Context, in *GetBookingByUserRequest, opts ...grpc.CallOption) (*GetBookingByUserRespond, error) {
	out := new(GetBookingByUserRespond)
	err := c.cc.Invoke(ctx, "/microless.acmeair.bookings.BookingsService/GetBookingByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsServiceClient) CancelBookingById(ctx context.Context, in *CancelBookingByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.acmeair.bookings.BookingsService/CancelBookingById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingsServiceServer is the server API for BookingsService service.
// All implementations must embed UnimplementedBookingsServiceServer
// for forward compatibility
type BookingsServiceServer interface {
	// REST api
	BookFlights(context.Context, *BookFlightsRequest) (*BookFlightsRespond, error)
	GetBookingById(context.Context, *GetBookingByIdRequest) (*GetBookingByIdRespond, error)
	GetBookingByUser(context.Context, *GetBookingByUserRequest) (*GetBookingByUserRespond, error)
	CancelBookingById(context.Context, *CancelBookingByIdRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBookingsServiceServer()
}

// UnimplementedBookingsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingsServiceServer struct {
}

func (UnimplementedBookingsServiceServer) BookFlights(context.Context, *BookFlightsRequest) (*BookFlightsRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookFlights not implemented")
}
func (UnimplementedBookingsServiceServer) GetBookingById(context.Context, *GetBookingByIdRequest) (*GetBookingByIdRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingById not implemented")
}
func (UnimplementedBookingsServiceServer) GetBookingByUser(context.Context, *GetBookingByUserRequest) (*GetBookingByUserRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingByUser not implemented")
}
func (UnimplementedBookingsServiceServer) CancelBookingById(context.Context, *CancelBookingByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBookingById not implemented")
}
func (UnimplementedBookingsServiceServer) mustEmbedUnimplementedBookingsServiceServer() {}

// UnsafeBookingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingsServiceServer will
// result in compilation errors.
type UnsafeBookingsServiceServer interface {
	mustEmbedUnimplementedBookingsServiceServer()
}

func RegisterBookingsServiceServer(s grpc.ServiceRegistrar, srv BookingsServiceServer) {
	s.RegisterService(&BookingsService_ServiceDesc, srv)
}

func _BookingsService_BookFlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookFlightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServiceServer).BookFlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.acmeair.bookings.BookingsService/BookFlights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServiceServer).BookFlights(ctx, req.(*BookFlightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingsService_GetBookingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServiceServer).GetBookingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.acmeair.bookings.BookingsService/GetBookingById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServiceServer).GetBookingById(ctx, req.(*GetBookingByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingsService_GetBookingByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServiceServer).GetBookingByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.acmeair.bookings.BookingsService/GetBookingByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServiceServer).GetBookingByUser(ctx, req.(*GetBookingByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingsService_CancelBookingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServiceServer).CancelBookingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.acmeair.bookings.BookingsService/CancelBookingById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServiceServer).CancelBookingById(ctx, req.(*CancelBookingByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingsService_ServiceDesc is the grpc.ServiceDesc for BookingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microless.acmeair.bookings.BookingsService",
	HandlerType: (*BookingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookFlights",
			Handler:    _BookingsService_BookFlights_Handler,
		},
		{
			MethodName: "GetBookingById",
			Handler:    _BookingsService_GetBookingById_Handler,
		},
		{
			MethodName: "GetBookingByUser",
			Handler:    _BookingsService_GetBookingByUser_Handler,
		},
		{
			MethodName: "CancelBookingById",
			Handler:    _BookingsService_CancelBookingById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bookings.proto",
}
