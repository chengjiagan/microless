# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from proto import rate_pb2 as proto_dot_rate__pb2


class RateServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRates = channel.unary_unary(
                '/microless.hotelreservation.rate.RateService/GetRates',
                request_serializer=proto_dot_rate__pb2.GetRatesRequest.SerializeToString,
                response_deserializer=proto_dot_rate__pb2.GetRatesRespond.FromString,
                )
        self.AddRate = channel.unary_unary(
                '/microless.hotelreservation.rate.RateService/AddRate',
                request_serializer=proto_dot_rate__pb2.AddRateRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class RateServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRates(self, request, context):
        """GetRates returns rate codes for hotels for a given date range
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRates,
                    request_deserializer=proto_dot_rate__pb2.GetRatesRequest.FromString,
                    response_serializer=proto_dot_rate__pb2.GetRatesRespond.SerializeToString,
            ),
            'AddRate': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRate,
                    request_deserializer=proto_dot_rate__pb2.AddRateRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'microless.hotelreservation.rate.RateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RateService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/microless.hotelreservation.rate.RateService/GetRates',
            proto_dot_rate__pb2.GetRatesRequest.SerializeToString,
            proto_dot_rate__pb2.GetRatesRespond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/microless.hotelreservation.rate.RateService/AddRate',
            proto_dot_rate__pb2.AddRateRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
