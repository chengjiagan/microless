// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/usermention.proto

package usermention

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserMentionServiceClient is the client API for UserMentionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserMentionServiceClient interface {
	ComposeUserMentions(ctx context.Context, in *ComposeUserMentionsRequest, opts ...grpc.CallOption) (*ComposeUserMentionsRespond, error)
}

type userMentionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMentionServiceClient(cc grpc.ClientConnInterface) UserMentionServiceClient {
	return &userMentionServiceClient{cc}
}

func (c *userMentionServiceClient) ComposeUserMentions(ctx context.Context, in *ComposeUserMentionsRequest, opts ...grpc.CallOption) (*ComposeUserMentionsRespond, error) {
	out := new(ComposeUserMentionsRespond)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.usermention.UserMentionService/ComposeUserMentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMentionServiceServer is the server API for UserMentionService service.
// All implementations must embed UnimplementedUserMentionServiceServer
// for forward compatibility
type UserMentionServiceServer interface {
	ComposeUserMentions(context.Context, *ComposeUserMentionsRequest) (*ComposeUserMentionsRespond, error)
	mustEmbedUnimplementedUserMentionServiceServer()
}

// UnimplementedUserMentionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserMentionServiceServer struct {
}

func (UnimplementedUserMentionServiceServer) ComposeUserMentions(context.Context, *ComposeUserMentionsRequest) (*ComposeUserMentionsRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposeUserMentions not implemented")
}
func (UnimplementedUserMentionServiceServer) mustEmbedUnimplementedUserMentionServiceServer() {}

// UnsafeUserMentionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserMentionServiceServer will
// result in compilation errors.
type UnsafeUserMentionServiceServer interface {
	mustEmbedUnimplementedUserMentionServiceServer()
}

func RegisterUserMentionServiceServer(s grpc.ServiceRegistrar, srv UserMentionServiceServer) {
	s.RegisterService(&UserMentionService_ServiceDesc, srv)
}

func _UserMentionService_ComposeUserMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComposeUserMentionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMentionServiceServer).ComposeUserMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.usermention.UserMentionService/ComposeUserMentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMentionServiceServer).ComposeUserMentions(ctx, req.(*ComposeUserMentionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserMentionService_ServiceDesc is the grpc.ServiceDesc for UserMentionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMentionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microless.socialnetwork.usermention.UserMentionService",
	HandlerType: (*UserMentionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComposeUserMentions",
			Handler:    _UserMentionService_ComposeUserMentions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/usermention.proto",
}
