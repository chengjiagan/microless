// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/usertimeline.proto

package usertimeline

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserTimelineServiceClient is the client API for UserTimelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserTimelineServiceClient interface {
	WriteUserTimeline(ctx context.Context, in *WriteUserTimelineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadUserTimeline(ctx context.Context, in *ReadUserTimelineRequest, opts ...grpc.CallOption) (*ReadUserTimelineRespond, error)
	InsertUser(ctx context.Context, in *InsertUserResquest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userTimelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserTimelineServiceClient(cc grpc.ClientConnInterface) UserTimelineServiceClient {
	return &userTimelineServiceClient{cc}
}

func (c *userTimelineServiceClient) WriteUserTimeline(ctx context.Context, in *WriteUserTimelineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.usertimeline.UserTimelineService/WriteUserTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTimelineServiceClient) ReadUserTimeline(ctx context.Context, in *ReadUserTimelineRequest, opts ...grpc.CallOption) (*ReadUserTimelineRespond, error) {
	out := new(ReadUserTimelineRespond)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.usertimeline.UserTimelineService/ReadUserTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTimelineServiceClient) InsertUser(ctx context.Context, in *InsertUserResquest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.usertimeline.UserTimelineService/InsertUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserTimelineServiceServer is the server API for UserTimelineService service.
// All implementations must embed UnimplementedUserTimelineServiceServer
// for forward compatibility
type UserTimelineServiceServer interface {
	WriteUserTimeline(context.Context, *WriteUserTimelineRequest) (*emptypb.Empty, error)
	ReadUserTimeline(context.Context, *ReadUserTimelineRequest) (*ReadUserTimelineRespond, error)
	InsertUser(context.Context, *InsertUserResquest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserTimelineServiceServer()
}

// UnimplementedUserTimelineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserTimelineServiceServer struct {
}

func (UnimplementedUserTimelineServiceServer) WriteUserTimeline(context.Context, *WriteUserTimelineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteUserTimeline not implemented")
}
func (UnimplementedUserTimelineServiceServer) ReadUserTimeline(context.Context, *ReadUserTimelineRequest) (*ReadUserTimelineRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserTimeline not implemented")
}
func (UnimplementedUserTimelineServiceServer) InsertUser(context.Context, *InsertUserResquest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUser not implemented")
}
func (UnimplementedUserTimelineServiceServer) mustEmbedUnimplementedUserTimelineServiceServer() {}

// UnsafeUserTimelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserTimelineServiceServer will
// result in compilation errors.
type UnsafeUserTimelineServiceServer interface {
	mustEmbedUnimplementedUserTimelineServiceServer()
}

func RegisterUserTimelineServiceServer(s grpc.ServiceRegistrar, srv UserTimelineServiceServer) {
	s.RegisterService(&UserTimelineService_ServiceDesc, srv)
}

func _UserTimelineService_WriteUserTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteUserTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTimelineServiceServer).WriteUserTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.usertimeline.UserTimelineService/WriteUserTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTimelineServiceServer).WriteUserTimeline(ctx, req.(*WriteUserTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTimelineService_ReadUserTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTimelineServiceServer).ReadUserTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.usertimeline.UserTimelineService/ReadUserTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTimelineServiceServer).ReadUserTimeline(ctx, req.(*ReadUserTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTimelineService_InsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTimelineServiceServer).InsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.usertimeline.UserTimelineService/InsertUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTimelineServiceServer).InsertUser(ctx, req.(*InsertUserResquest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserTimelineService_ServiceDesc is the grpc.ServiceDesc for UserTimelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserTimelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microless.socialnetwork.usertimeline.UserTimelineService",
	HandlerType: (*UserTimelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteUserTimeline",
			Handler:    _UserTimelineService_WriteUserTimeline_Handler,
		},
		{
			MethodName: "ReadUserTimeline",
			Handler:    _UserTimelineService_ReadUserTimeline_Handler,
		},
		{
			MethodName: "InsertUser",
			Handler:    _UserTimelineService_InsertUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/usertimeline.proto",
}
