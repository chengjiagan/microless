// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/socialgraph.proto

package socialgraph

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SocialGraphServiceClient is the client API for SocialGraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialGraphServiceClient interface {
	GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersRespond, error)
	GetFollowees(ctx context.Context, in *GetFolloweesRequest, opts ...grpc.CallOption) (*GetFolloweesRespond, error)
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FollowWithUsername(ctx context.Context, in *FollowWithUsernameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnfollowWithUsername(ctx context.Context, in *UnfollowWithUsernameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InsertUser(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type socialGraphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialGraphServiceClient(cc grpc.ClientConnInterface) SocialGraphServiceClient {
	return &socialGraphServiceClient{cc}
}

func (c *socialGraphServiceClient) GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersRespond, error) {
	out := new(GetFollowersRespond)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.socialgraph.SocialGraphService/GetFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) GetFollowees(ctx context.Context, in *GetFolloweesRequest, opts ...grpc.CallOption) (*GetFolloweesRespond, error) {
	out := new(GetFolloweesRespond)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.socialgraph.SocialGraphService/GetFollowees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.socialgraph.SocialGraphService/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.socialgraph.SocialGraphService/Unfollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) FollowWithUsername(ctx context.Context, in *FollowWithUsernameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.socialgraph.SocialGraphService/FollowWithUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) UnfollowWithUsername(ctx context.Context, in *UnfollowWithUsernameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.socialgraph.SocialGraphService/UnfollowWithUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) InsertUser(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.socialgraph.SocialGraphService/InsertUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialGraphServiceServer is the server API for SocialGraphService service.
// All implementations must embed UnimplementedSocialGraphServiceServer
// for forward compatibility
type SocialGraphServiceServer interface {
	GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersRespond, error)
	GetFollowees(context.Context, *GetFolloweesRequest) (*GetFolloweesRespond, error)
	Follow(context.Context, *FollowRequest) (*emptypb.Empty, error)
	Unfollow(context.Context, *UnfollowRequest) (*emptypb.Empty, error)
	FollowWithUsername(context.Context, *FollowWithUsernameRequest) (*emptypb.Empty, error)
	UnfollowWithUsername(context.Context, *UnfollowWithUsernameRequest) (*emptypb.Empty, error)
	InsertUser(context.Context, *InsertUserRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSocialGraphServiceServer()
}

// UnimplementedSocialGraphServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocialGraphServiceServer struct {
}

func (UnimplementedSocialGraphServiceServer) GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedSocialGraphServiceServer) GetFollowees(context.Context, *GetFolloweesRequest) (*GetFolloweesRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowees not implemented")
}
func (UnimplementedSocialGraphServiceServer) Follow(context.Context, *FollowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedSocialGraphServiceServer) Unfollow(context.Context, *UnfollowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedSocialGraphServiceServer) FollowWithUsername(context.Context, *FollowWithUsernameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowWithUsername not implemented")
}
func (UnimplementedSocialGraphServiceServer) UnfollowWithUsername(context.Context, *UnfollowWithUsernameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowWithUsername not implemented")
}
func (UnimplementedSocialGraphServiceServer) InsertUser(context.Context, *InsertUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUser not implemented")
}
func (UnimplementedSocialGraphServiceServer) mustEmbedUnimplementedSocialGraphServiceServer() {}

// UnsafeSocialGraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialGraphServiceServer will
// result in compilation errors.
type UnsafeSocialGraphServiceServer interface {
	mustEmbedUnimplementedSocialGraphServiceServer()
}

func RegisterSocialGraphServiceServer(s grpc.ServiceRegistrar, srv SocialGraphServiceServer) {
	s.RegisterService(&SocialGraphService_ServiceDesc, srv)
}

func _SocialGraphService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.socialgraph.SocialGraphService/GetFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).GetFollowers(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_GetFollowees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolloweesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).GetFollowees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.socialgraph.SocialGraphService/GetFollowees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).GetFollowees(ctx, req.(*GetFolloweesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.socialgraph.SocialGraphService/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.socialgraph.SocialGraphService/Unfollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).Unfollow(ctx, req.(*UnfollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_FollowWithUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowWithUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).FollowWithUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.socialgraph.SocialGraphService/FollowWithUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).FollowWithUsername(ctx, req.(*FollowWithUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_UnfollowWithUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowWithUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).UnfollowWithUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.socialgraph.SocialGraphService/UnfollowWithUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).UnfollowWithUsername(ctx, req.(*UnfollowWithUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_InsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).InsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.socialgraph.SocialGraphService/InsertUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).InsertUser(ctx, req.(*InsertUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialGraphService_ServiceDesc is the grpc.ServiceDesc for SocialGraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialGraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microless.socialnetwork.socialgraph.SocialGraphService",
	HandlerType: (*SocialGraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollowers",
			Handler:    _SocialGraphService_GetFollowers_Handler,
		},
		{
			MethodName: "GetFollowees",
			Handler:    _SocialGraphService_GetFollowees_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _SocialGraphService_Follow_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _SocialGraphService_Unfollow_Handler,
		},
		{
			MethodName: "FollowWithUsername",
			Handler:    _SocialGraphService_FollowWithUsername_Handler,
		},
		{
			MethodName: "UnfollowWithUsername",
			Handler:    _SocialGraphService_UnfollowWithUsername_Handler,
		},
		{
			MethodName: "InsertUser",
			Handler:    _SocialGraphService_InsertUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/socialgraph.proto",
}
