// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/poststorage.proto

package poststorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostStorageServiceClient is the client API for PostStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostStorageServiceClient interface {
	StorePost(ctx context.Context, in *StorePostRequest, opts ...grpc.CallOption) (*StorePostRespond, error)
	ReadPosts(ctx context.Context, in *ReadPostsRequest, opts ...grpc.CallOption) (*ReadPostsRespond, error)
}

type postStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostStorageServiceClient(cc grpc.ClientConnInterface) PostStorageServiceClient {
	return &postStorageServiceClient{cc}
}

func (c *postStorageServiceClient) StorePost(ctx context.Context, in *StorePostRequest, opts ...grpc.CallOption) (*StorePostRespond, error) {
	out := new(StorePostRespond)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.poststorage.PostStorageService/StorePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postStorageServiceClient) ReadPosts(ctx context.Context, in *ReadPostsRequest, opts ...grpc.CallOption) (*ReadPostsRespond, error) {
	out := new(ReadPostsRespond)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.poststorage.PostStorageService/ReadPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostStorageServiceServer is the server API for PostStorageService service.
// All implementations must embed UnimplementedPostStorageServiceServer
// for forward compatibility
type PostStorageServiceServer interface {
	StorePost(context.Context, *StorePostRequest) (*StorePostRespond, error)
	ReadPosts(context.Context, *ReadPostsRequest) (*ReadPostsRespond, error)
	mustEmbedUnimplementedPostStorageServiceServer()
}

// UnimplementedPostStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostStorageServiceServer struct {
}

func (UnimplementedPostStorageServiceServer) StorePost(context.Context, *StorePostRequest) (*StorePostRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorePost not implemented")
}
func (UnimplementedPostStorageServiceServer) ReadPosts(context.Context, *ReadPostsRequest) (*ReadPostsRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosts not implemented")
}
func (UnimplementedPostStorageServiceServer) mustEmbedUnimplementedPostStorageServiceServer() {}

// UnsafePostStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostStorageServiceServer will
// result in compilation errors.
type UnsafePostStorageServiceServer interface {
	mustEmbedUnimplementedPostStorageServiceServer()
}

func RegisterPostStorageServiceServer(s grpc.ServiceRegistrar, srv PostStorageServiceServer) {
	s.RegisterService(&PostStorageService_ServiceDesc, srv)
}

func _PostStorageService_StorePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostStorageServiceServer).StorePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.poststorage.PostStorageService/StorePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostStorageServiceServer).StorePost(ctx, req.(*StorePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostStorageService_ReadPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostStorageServiceServer).ReadPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.poststorage.PostStorageService/ReadPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostStorageServiceServer).ReadPosts(ctx, req.(*ReadPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostStorageService_ServiceDesc is the grpc.ServiceDesc for PostStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microless.socialnetwork.poststorage.PostStorageService",
	HandlerType: (*PostStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StorePost",
			Handler:    _PostStorageService_StorePost_Handler,
		},
		{
			MethodName: "ReadPosts",
			Handler:    _PostStorageService_ReadPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/poststorage.proto",
}
