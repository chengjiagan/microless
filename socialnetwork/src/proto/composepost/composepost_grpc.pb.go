// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/composepost.proto

package composepost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComposePostServiceClient is the client API for ComposePostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComposePostServiceClient interface {
	ComposePost(ctx context.Context, in *ComposePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type composePostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComposePostServiceClient(cc grpc.ClientConnInterface) ComposePostServiceClient {
	return &composePostServiceClient{cc}
}

func (c *composePostServiceClient) ComposePost(ctx context.Context, in *ComposePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.socialnetwork.composepost.ComposePostService/ComposePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComposePostServiceServer is the server API for ComposePostService service.
// All implementations must embed UnimplementedComposePostServiceServer
// for forward compatibility
type ComposePostServiceServer interface {
	ComposePost(context.Context, *ComposePostRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedComposePostServiceServer()
}

// UnimplementedComposePostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComposePostServiceServer struct {
}

func (UnimplementedComposePostServiceServer) ComposePost(context.Context, *ComposePostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposePost not implemented")
}
func (UnimplementedComposePostServiceServer) mustEmbedUnimplementedComposePostServiceServer() {}

// UnsafeComposePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComposePostServiceServer will
// result in compilation errors.
type UnsafeComposePostServiceServer interface {
	mustEmbedUnimplementedComposePostServiceServer()
}

func RegisterComposePostServiceServer(s grpc.ServiceRegistrar, srv ComposePostServiceServer) {
	s.RegisterService(&ComposePostService_ServiceDesc, srv)
}

func _ComposePostService_ComposePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComposePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposePostServiceServer).ComposePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.socialnetwork.composepost.ComposePostService/ComposePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposePostServiceServer).ComposePost(ctx, req.(*ComposePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComposePostService_ServiceDesc is the grpc.ServiceDesc for ComposePostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComposePostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microless.socialnetwork.composepost.ComposePostService",
	HandlerType: (*ComposePostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComposePost",
			Handler:    _ComposePostService_ComposePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/composepost.proto",
}
