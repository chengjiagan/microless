# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import user_pb2 as proto_dot_user__pb2


class UserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/microless.socialnetwork.user.UserService/RegisterUser',
                request_serializer=proto_dot_user__pb2.RegisterUserRequest.SerializeToString,
                response_deserializer=proto_dot_user__pb2.RegisterUserRespond.FromString,
                )
        self.Login = channel.unary_unary(
                '/microless.socialnetwork.user.UserService/Login',
                request_serializer=proto_dot_user__pb2.LoginRequest.SerializeToString,
                response_deserializer=proto_dot_user__pb2.LoginRespond.FromString,
                )
        self.ComposeCreatorWithUserId = channel.unary_unary(
                '/microless.socialnetwork.user.UserService/ComposeCreatorWithUserId',
                request_serializer=proto_dot_user__pb2.ComposeCreatorWithUserIdRequest.SerializeToString,
                response_deserializer=proto_dot_user__pb2.ComposeCreatorWithUserIdRespond.FromString,
                )
        self.ComposeCreatorWithUsername = channel.unary_unary(
                '/microless.socialnetwork.user.UserService/ComposeCreatorWithUsername',
                request_serializer=proto_dot_user__pb2.ComposeCreatorWithUsernameRequest.SerializeToString,
                response_deserializer=proto_dot_user__pb2.ComposeCreatorWithUsernameRespond.FromString,
                )
        self.GetUserId = channel.unary_unary(
                '/microless.socialnetwork.user.UserService/GetUserId',
                request_serializer=proto_dot_user__pb2.GetUserIdRequest.SerializeToString,
                response_deserializer=proto_dot_user__pb2.GetUserIdRespond.FromString,
                )


class UserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComposeCreatorWithUserId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComposeCreatorWithUsername(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=proto_dot_user__pb2.RegisterUserRequest.FromString,
                    response_serializer=proto_dot_user__pb2.RegisterUserRespond.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=proto_dot_user__pb2.LoginRequest.FromString,
                    response_serializer=proto_dot_user__pb2.LoginRespond.SerializeToString,
            ),
            'ComposeCreatorWithUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.ComposeCreatorWithUserId,
                    request_deserializer=proto_dot_user__pb2.ComposeCreatorWithUserIdRequest.FromString,
                    response_serializer=proto_dot_user__pb2.ComposeCreatorWithUserIdRespond.SerializeToString,
            ),
            'ComposeCreatorWithUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.ComposeCreatorWithUsername,
                    request_deserializer=proto_dot_user__pb2.ComposeCreatorWithUsernameRequest.FromString,
                    response_serializer=proto_dot_user__pb2.ComposeCreatorWithUsernameRespond.SerializeToString,
            ),
            'GetUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserId,
                    request_deserializer=proto_dot_user__pb2.GetUserIdRequest.FromString,
                    response_serializer=proto_dot_user__pb2.GetUserIdRespond.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'microless.socialnetwork.user.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/microless.socialnetwork.user.UserService/RegisterUser',
            proto_dot_user__pb2.RegisterUserRequest.SerializeToString,
            proto_dot_user__pb2.RegisterUserRespond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/microless.socialnetwork.user.UserService/Login',
            proto_dot_user__pb2.LoginRequest.SerializeToString,
            proto_dot_user__pb2.LoginRespond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComposeCreatorWithUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/microless.socialnetwork.user.UserService/ComposeCreatorWithUserId',
            proto_dot_user__pb2.ComposeCreatorWithUserIdRequest.SerializeToString,
            proto_dot_user__pb2.ComposeCreatorWithUserIdRespond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComposeCreatorWithUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/microless.socialnetwork.user.UserService/ComposeCreatorWithUsername',
            proto_dot_user__pb2.ComposeCreatorWithUsernameRequest.SerializeToString,
            proto_dot_user__pb2.ComposeCreatorWithUsernameRespond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/microless.socialnetwork.user.UserService/GetUserId',
            proto_dot_user__pb2.GetUserIdRequest.SerializeToString,
            proto_dot_user__pb2.GetUserIdRespond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
