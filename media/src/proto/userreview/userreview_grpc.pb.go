// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/userreview.proto

package userreview

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserReviewServiceClient is the client API for UserReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserReviewServiceClient interface {
	UploadUserReview(ctx context.Context, in *UploadUserReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadUserReviews(ctx context.Context, in *ReadUserReviewsRequest, opts ...grpc.CallOption) (*ReadUserReviewsRespond, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userReviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserReviewServiceClient(cc grpc.ClientConnInterface) UserReviewServiceClient {
	return &userReviewServiceClient{cc}
}

func (c *userReviewServiceClient) UploadUserReview(ctx context.Context, in *UploadUserReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.media.userreview.UserReviewService/UploadUserReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReviewServiceClient) ReadUserReviews(ctx context.Context, in *ReadUserReviewsRequest, opts ...grpc.CallOption) (*ReadUserReviewsRespond, error) {
	out := new(ReadUserReviewsRespond)
	err := c.cc.Invoke(ctx, "/microless.media.userreview.UserReviewService/ReadUserReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReviewServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.media.userreview.UserReviewService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserReviewServiceServer is the server API for UserReviewService service.
// All implementations must embed UnimplementedUserReviewServiceServer
// for forward compatibility
type UserReviewServiceServer interface {
	UploadUserReview(context.Context, *UploadUserReviewRequest) (*emptypb.Empty, error)
	ReadUserReviews(context.Context, *ReadUserReviewsRequest) (*ReadUserReviewsRespond, error)
	CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserReviewServiceServer()
}

// UnimplementedUserReviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserReviewServiceServer struct {
}

func (UnimplementedUserReviewServiceServer) UploadUserReview(context.Context, *UploadUserReviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUserReview not implemented")
}
func (UnimplementedUserReviewServiceServer) ReadUserReviews(context.Context, *ReadUserReviewsRequest) (*ReadUserReviewsRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserReviews not implemented")
}
func (UnimplementedUserReviewServiceServer) CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserReviewServiceServer) mustEmbedUnimplementedUserReviewServiceServer() {}

// UnsafeUserReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserReviewServiceServer will
// result in compilation errors.
type UnsafeUserReviewServiceServer interface {
	mustEmbedUnimplementedUserReviewServiceServer()
}

func RegisterUserReviewServiceServer(s grpc.ServiceRegistrar, srv UserReviewServiceServer) {
	s.RegisterService(&UserReviewService_ServiceDesc, srv)
}

func _UserReviewService_UploadUserReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUserReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReviewServiceServer).UploadUserReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.media.userreview.UserReviewService/UploadUserReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReviewServiceServer).UploadUserReview(ctx, req.(*UploadUserReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReviewService_ReadUserReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReviewServiceServer).ReadUserReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.media.userreview.UserReviewService/ReadUserReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReviewServiceServer).ReadUserReviews(ctx, req.(*ReadUserReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReviewService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReviewServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.media.userreview.UserReviewService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReviewServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserReviewService_ServiceDesc is the grpc.ServiceDesc for UserReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microless.media.userreview.UserReviewService",
	HandlerType: (*UserReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadUserReview",
			Handler:    _UserReviewService_UploadUserReview_Handler,
		},
		{
			MethodName: "ReadUserReviews",
			Handler:    _UserReviewService_ReadUserReviews_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserReviewService_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/userreview.proto",
}
