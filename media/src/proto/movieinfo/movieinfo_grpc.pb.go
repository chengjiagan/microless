// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/movieinfo.proto

package movieinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	proto "microless/media/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieInfoServiceClient is the client API for MovieInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieInfoServiceClient interface {
	WriteMovieInfo(ctx context.Context, in *WriteMovieInfoRequest, opts ...grpc.CallOption) (*WriteMovieInfoRespond, error)
	ReadMovieInfo(ctx context.Context, in *ReadMovieInfoRequest, opts ...grpc.CallOption) (*proto.MovieInfo, error)
	UpdateRating(ctx context.Context, in *UpdateRatingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type movieInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieInfoServiceClient(cc grpc.ClientConnInterface) MovieInfoServiceClient {
	return &movieInfoServiceClient{cc}
}

func (c *movieInfoServiceClient) WriteMovieInfo(ctx context.Context, in *WriteMovieInfoRequest, opts ...grpc.CallOption) (*WriteMovieInfoRespond, error) {
	out := new(WriteMovieInfoRespond)
	err := c.cc.Invoke(ctx, "/microless.media.movieinfo.MovieInfoService/WriteMovieInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieInfoServiceClient) ReadMovieInfo(ctx context.Context, in *ReadMovieInfoRequest, opts ...grpc.CallOption) (*proto.MovieInfo, error) {
	out := new(proto.MovieInfo)
	err := c.cc.Invoke(ctx, "/microless.media.movieinfo.MovieInfoService/ReadMovieInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieInfoServiceClient) UpdateRating(ctx context.Context, in *UpdateRatingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.media.movieinfo.MovieInfoService/UpdateRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieInfoServiceServer is the server API for MovieInfoService service.
// All implementations must embed UnimplementedMovieInfoServiceServer
// for forward compatibility
type MovieInfoServiceServer interface {
	WriteMovieInfo(context.Context, *WriteMovieInfoRequest) (*WriteMovieInfoRespond, error)
	ReadMovieInfo(context.Context, *ReadMovieInfoRequest) (*proto.MovieInfo, error)
	UpdateRating(context.Context, *UpdateRatingRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMovieInfoServiceServer()
}

// UnimplementedMovieInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieInfoServiceServer struct {
}

func (UnimplementedMovieInfoServiceServer) WriteMovieInfo(context.Context, *WriteMovieInfoRequest) (*WriteMovieInfoRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMovieInfo not implemented")
}
func (UnimplementedMovieInfoServiceServer) ReadMovieInfo(context.Context, *ReadMovieInfoRequest) (*proto.MovieInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMovieInfo not implemented")
}
func (UnimplementedMovieInfoServiceServer) UpdateRating(context.Context, *UpdateRatingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRating not implemented")
}
func (UnimplementedMovieInfoServiceServer) mustEmbedUnimplementedMovieInfoServiceServer() {}

// UnsafeMovieInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieInfoServiceServer will
// result in compilation errors.
type UnsafeMovieInfoServiceServer interface {
	mustEmbedUnimplementedMovieInfoServiceServer()
}

func RegisterMovieInfoServiceServer(s grpc.ServiceRegistrar, srv MovieInfoServiceServer) {
	s.RegisterService(&MovieInfoService_ServiceDesc, srv)
}

func _MovieInfoService_WriteMovieInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMovieInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieInfoServiceServer).WriteMovieInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.media.movieinfo.MovieInfoService/WriteMovieInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieInfoServiceServer).WriteMovieInfo(ctx, req.(*WriteMovieInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieInfoService_ReadMovieInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMovieInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieInfoServiceServer).ReadMovieInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.media.movieinfo.MovieInfoService/ReadMovieInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieInfoServiceServer).ReadMovieInfo(ctx, req.(*ReadMovieInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieInfoService_UpdateRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieInfoServiceServer).UpdateRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.media.movieinfo.MovieInfoService/UpdateRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieInfoServiceServer).UpdateRating(ctx, req.(*UpdateRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieInfoService_ServiceDesc is the grpc.ServiceDesc for MovieInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microless.media.movieinfo.MovieInfoService",
	HandlerType: (*MovieInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteMovieInfo",
			Handler:    _MovieInfoService_WriteMovieInfo_Handler,
		},
		{
			MethodName: "ReadMovieInfo",
			Handler:    _MovieInfoService_ReadMovieInfo_Handler,
		},
		{
			MethodName: "UpdateRating",
			Handler:    _MovieInfoService_UpdateRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/movieinfo.proto",
}
