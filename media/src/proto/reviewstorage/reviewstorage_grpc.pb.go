// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/reviewstorage.proto

package reviewstorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewStorageServiceClient is the client API for ReviewStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewStorageServiceClient interface {
	StoreReview(ctx context.Context, in *StoreReviewRequest, opts ...grpc.CallOption) (*StoreReviewRespond, error)
	ReadReviews(ctx context.Context, in *ReadReviewsRequest, opts ...grpc.CallOption) (*ReadReviewsRespond, error)
}

type reviewStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewStorageServiceClient(cc grpc.ClientConnInterface) ReviewStorageServiceClient {
	return &reviewStorageServiceClient{cc}
}

func (c *reviewStorageServiceClient) StoreReview(ctx context.Context, in *StoreReviewRequest, opts ...grpc.CallOption) (*StoreReviewRespond, error) {
	out := new(StoreReviewRespond)
	err := c.cc.Invoke(ctx, "/microless.media.reviewstorage.ReviewStorageService/StoreReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewStorageServiceClient) ReadReviews(ctx context.Context, in *ReadReviewsRequest, opts ...grpc.CallOption) (*ReadReviewsRespond, error) {
	out := new(ReadReviewsRespond)
	err := c.cc.Invoke(ctx, "/microless.media.reviewstorage.ReviewStorageService/ReadReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewStorageServiceServer is the server API for ReviewStorageService service.
// All implementations must embed UnimplementedReviewStorageServiceServer
// for forward compatibility
type ReviewStorageServiceServer interface {
	StoreReview(context.Context, *StoreReviewRequest) (*StoreReviewRespond, error)
	ReadReviews(context.Context, *ReadReviewsRequest) (*ReadReviewsRespond, error)
	mustEmbedUnimplementedReviewStorageServiceServer()
}

// UnimplementedReviewStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReviewStorageServiceServer struct {
}

func (UnimplementedReviewStorageServiceServer) StoreReview(context.Context, *StoreReviewRequest) (*StoreReviewRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreReview not implemented")
}
func (UnimplementedReviewStorageServiceServer) ReadReviews(context.Context, *ReadReviewsRequest) (*ReadReviewsRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadReviews not implemented")
}
func (UnimplementedReviewStorageServiceServer) mustEmbedUnimplementedReviewStorageServiceServer() {}

// UnsafeReviewStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewStorageServiceServer will
// result in compilation errors.
type UnsafeReviewStorageServiceServer interface {
	mustEmbedUnimplementedReviewStorageServiceServer()
}

func RegisterReviewStorageServiceServer(s grpc.ServiceRegistrar, srv ReviewStorageServiceServer) {
	s.RegisterService(&ReviewStorageService_ServiceDesc, srv)
}

func _ReviewStorageService_StoreReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewStorageServiceServer).StoreReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.media.reviewstorage.ReviewStorageService/StoreReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewStorageServiceServer).StoreReview(ctx, req.(*StoreReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewStorageService_ReadReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewStorageServiceServer).ReadReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.media.reviewstorage.ReviewStorageService/ReadReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewStorageServiceServer).ReadReviews(ctx, req.(*ReadReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewStorageService_ServiceDesc is the grpc.ServiceDesc for ReviewStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microless.media.reviewstorage.ReviewStorageService",
	HandlerType: (*ReviewStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreReview",
			Handler:    _ReviewStorageService_StoreReview_Handler,
		},
		{
			MethodName: "ReadReviews",
			Handler:    _ReviewStorageService_ReadReviews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reviewstorage.proto",
}
