// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/composereview.proto

package composereview

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComposeReviewClient is the client API for ComposeReview service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComposeReviewClient interface {
	ComposeReview(ctx context.Context, in *ComposeReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type composeReviewClient struct {
	cc grpc.ClientConnInterface
}

func NewComposeReviewClient(cc grpc.ClientConnInterface) ComposeReviewClient {
	return &composeReviewClient{cc}
}

func (c *composeReviewClient) ComposeReview(ctx context.Context, in *ComposeReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microless.media.composereview.ComposeReview/ComposeReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComposeReviewServer is the server API for ComposeReview service.
// All implementations must embed UnimplementedComposeReviewServer
// for forward compatibility
type ComposeReviewServer interface {
	ComposeReview(context.Context, *ComposeReviewRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedComposeReviewServer()
}

// UnimplementedComposeReviewServer must be embedded to have forward compatible implementations.
type UnimplementedComposeReviewServer struct {
}

func (UnimplementedComposeReviewServer) ComposeReview(context.Context, *ComposeReviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposeReview not implemented")
}
func (UnimplementedComposeReviewServer) mustEmbedUnimplementedComposeReviewServer() {}

// UnsafeComposeReviewServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComposeReviewServer will
// result in compilation errors.
type UnsafeComposeReviewServer interface {
	mustEmbedUnimplementedComposeReviewServer()
}

func RegisterComposeReviewServer(s grpc.ServiceRegistrar, srv ComposeReviewServer) {
	s.RegisterService(&ComposeReview_ServiceDesc, srv)
}

func _ComposeReview_ComposeReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComposeReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposeReviewServer).ComposeReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microless.media.composereview.ComposeReview/ComposeReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposeReviewServer).ComposeReview(ctx, req.(*ComposeReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComposeReview_ServiceDesc is the grpc.ServiceDesc for ComposeReview service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComposeReview_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microless.media.composereview.ComposeReview",
	HandlerType: (*ComposeReviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComposeReview",
			Handler:    _ComposeReview_ComposeReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/composereview.proto",
}
